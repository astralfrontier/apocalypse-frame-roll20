//- Show a section of the character sheet, wrapped in a frame, with a given title
mixin section(title)
  section.block
    if title
      h1.title.section-title&attributes(attributes)= title
    if block
      block

mixin textfield_v(attr, label, help)
  .field
    if label
      .field-label.is-large
        label.label.is-large= label
    .field-body
      if block
        .field.has-addons
          .control
            input.input.is-large.is-full(type="text" name=attr)&attributes(attributes)
          .control
            block
          if help
            p.help= help
      else
        .field
          .control
            input.input.is-large(type="text" name=attr)&attributes(attributes)
          if help
            p.help= help

mixin numberfield_v(attr, label, help)
  .field
    if label
      .field-label.is-large
        label.label.is-large= label
    .field-body
      if block
        .field.has-addons
          .control
            input.input.is-large(type="number" name=attr)&attributes(attributes)
          .control
            block
          if help
            p.help= help
      else
        .field
          .control
            input.input.is-large(type="number" name=attr)&attributes(attributes)
          if help
            p.help= help

mixin textfield(attr, label, help)
  .field.is-horizontal
    if label
      .field-label.is-large
        label.label.is-large= label
    .field-body
      if block
        .field.has-addons
          .control
            input.input.is-large.is-full(type="text" name=attr)&attributes(attributes)
          .control
            block
          if help
            p.help= help
      else
        .field
          .control
            input.input.is-large(type="text" name=attr)&attributes(attributes)
          if help
            p.help= help

mixin numberfield(attr, label, help)
  .field.is-horizontal
    if label
      .field-label.is-large
        label.label.is-large= label
    .field-body
      if block
        .field.has-addons
          .control
            input.input.is-large(type="number" name=attr)&attributes(attributes)
          .control
            block
          if help
            p.help= help
      else
        .field
          .control
            input.input.is-large(type="number" name=attr)&attributes(attributes)
          if help
            p.help= help

mixin textarea(attr, label)
  field.is-horizontal
    if label
      .field-label.is-large
        label.label.is-large= label
    .field-body
      .field
        .control
          textarea.textarea.is-large(name=attr)&attributes(attributes)

mixin track(attr, label, attr_bonus, label_bonus)
  //- e.g. attr_vigor, attr_tension - used for showing on tokens
  input(type="hidden" name=attr value="0")
  input(type="hidden" name=`${attr}_max` value="0")
  .columns
    .column
      strong= label
      span= " "
      span(name=attr)
      span= "/"
      span(name=`${attr}_max`)
      br
      +numberfield(`${attr}_base`, `${label_bonus} +`)
    .column
      each col in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        input(type="checkbox" name=`${attr}_box_${col}`)
        if col == 6
          br

mixin damage(attr)
  .field
    .control
      span.select.is-narrow
        select(name=attr)
          option(value='0') &#x1F7E2; Online
          option(value='1') &#x1F7E1; Needs a Drive roll
          option(value='2') &#x1F7E1; Needs a Control roll
          option(value='3') &#x1F534; Offline

mixin rollbutton(template, props)
  - let props_s = Object.keys(props).map(prop => `{{${prop}=${props[prop]}}}`)
  button.emoji.button.is-large(type="roll" value=`&{template:${template}} ${props_s.join(' ')}`) &#x1F3B2;